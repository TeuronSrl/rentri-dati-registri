# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_dati_registri.models.tipi_trasporto_transfrontaliero import TipiTrasportoTransfrontaliero
from typing import Optional, Set
from typing_extensions import Self

class DatiIntegrazioneFirModel(BaseModel):
    """
    Integrazione FIR - Registro C/S
    """ # noqa: E501
    numero_fir: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="Numero formulario")
    trasporto_transfrontaliero: Optional[StrictBool] = Field(default=None, description="Trasporto transfrontaliero")
    tipo_trasporto_transfrontaliero: Optional[TipiTrasportoTransfrontaliero] = Field(default=None, description="Tipo trasporto transfrontaliero.  Richiesto solamente se trasporto_transfrontaliero è uguale a true. Vedi API di codifica: <i>GET /codifiche/v1.0/tipi-trasporto-transfrontaliero</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>DM</i> - Documento di movimento (Allegato I-B  al Regolamento 1013/06)</li><li><i>DA</i> - Documento di accompagnamento (Allegato VII – al Regolamento 1013/06)</li></ul></p>")
    data_inizio_trasporto: Optional[datetime] = Field(default=None, description="Data inizio trasporto (formato ISO 8601 UTC)")
    __properties: ClassVar[List[str]] = ["numero_fir", "trasporto_transfrontaliero", "tipo_trasporto_transfrontaliero", "data_inizio_trasporto"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiIntegrazioneFirModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if numero_fir (nullable) is None
        # and model_fields_set contains the field
        if self.numero_fir is None and "numero_fir" in self.model_fields_set:
            _dict['numero_fir'] = None

        # set to None if trasporto_transfrontaliero (nullable) is None
        # and model_fields_set contains the field
        if self.trasporto_transfrontaliero is None and "trasporto_transfrontaliero" in self.model_fields_set:
            _dict['trasporto_transfrontaliero'] = None

        # set to None if tipo_trasporto_transfrontaliero (nullable) is None
        # and model_fields_set contains the field
        if self.tipo_trasporto_transfrontaliero is None and "tipo_trasporto_transfrontaliero" in self.model_fields_set:
            _dict['tipo_trasporto_transfrontaliero'] = None

        # set to None if data_inizio_trasporto (nullable) is None
        # and model_fields_set contains the field
        if self.data_inizio_trasporto is None and "data_inizio_trasporto" in self.model_fields_set:
            _dict['data_inizio_trasporto'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiIntegrazioneFirModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numero_fir": obj.get("numero_fir"),
            "trasporto_transfrontaliero": obj.get("trasporto_transfrontaliero"),
            "tipo_trasporto_transfrontaliero": obj.get("tipo_trasporto_transfrontaliero"),
            "data_inizio_trasporto": obj.get("data_inizio_trasporto")
        })
        return _obj


