# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from rentri_dati_registri.models.indirizzo_model import IndirizzoModel

class DatiProduttoreModel(BaseModel):
    """
    Produttore  # noqa: E501
    """
    denominazione: Optional[constr(strict=True, max_length=255)] = Field(default=None, description="Denominazione del soggetto")
    codice_fiscale: Optional[constr(strict=True, max_length=20, min_length=5)] = Field(default=None, description="Codice fiscale")
    nazione_id: Optional[constr(strict=True, max_length=2)] = Field(default=None, description="Codice ISO 3166-1 alpha-2 della nazione, in caso di \"IT\" Ã¨ possibile omettere.  Vengono accettati solo codici previsti dallo standard ISO 3166-1 alpha-2.  Vedi API di codifica: <i>GET /codifiche/v1.0/nazioni</i>  <i>Questo campo viene utilizzato esclusivamente per validare i dati di input in base alla nazione di appartenenza (non viene memorizzato e quindi restituito in output).</i>")
    indirizzo: IndirizzoModel = Field(default=..., description="Indirizzo")
    __properties = ["denominazione", "codice_fiscale", "nazione_id", "indirizzo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiProduttoreModel:
        """Create an instance of DatiProduttoreModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of indirizzo
        if self.indirizzo:
            _dict['indirizzo'] = self.indirizzo.to_dict()
        # set to None if denominazione (nullable) is None
        # and __fields_set__ contains the field
        if self.denominazione is None and "denominazione" in self.__fields_set__:
            _dict['denominazione'] = None

        # set to None if codice_fiscale (nullable) is None
        # and __fields_set__ contains the field
        if self.codice_fiscale is None and "codice_fiscale" in self.__fields_set__:
            _dict['codice_fiscale'] = None

        # set to None if nazione_id (nullable) is None
        # and __fields_set__ contains the field
        if self.nazione_id is None and "nazione_id" in self.__fields_set__:
            _dict['nazione_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiProduttoreModel:
        """Create an instance of DatiProduttoreModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiProduttoreModel.parse_obj(obj)

        _obj = DatiProduttoreModel.parse_obj({
            "denominazione": obj.get("denominazione"),
            "codice_fiscale": obj.get("codice_fiscale"),
            "nazione_id": obj.get("nazione_id"),
            "indirizzo": IndirizzoModel.from_dict(obj.get("indirizzo")) if obj.get("indirizzo") is not None else None
        })
        return _obj


