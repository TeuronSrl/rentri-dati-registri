# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, constr

class ValidaRegistroRequest(BaseModel):
    """
    Richiesta per la validazione strutturale del registro cronologico di carico e scarico digitale in formato XML  # noqa: E501
    """
    file_content: Union[StrictBytes, StrictStr] = Field(default=..., description="Contenuto in Base64 del file XML, o del file ZIP contenente il file XML, del registro cronologico di carico e scarico digitale")
    nome_file: constr(strict=True, min_length=1) = Field(default=..., description="Nome del file")
    mime: constr(strict=True, min_length=1) = Field(default=..., description="Tipo MIME del file da caricare")
    __properties = ["file_content", "nome_file", "mime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidaRegistroRequest:
        """Create an instance of ValidaRegistroRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidaRegistroRequest:
        """Create an instance of ValidaRegistroRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidaRegistroRequest.parse_obj(obj)

        _obj = ValidaRegistroRequest.parse_obj({
            "file_content": obj.get("file_content"),
            "nome_file": obj.get("nome_file"),
            "mime": obj.get("mime")
        })
        return _obj


