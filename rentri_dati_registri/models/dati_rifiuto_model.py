# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_dati_registri.models.caratteristiche_pericolo import CaratteristichePericolo
from rentri_dati_registri.models.categorie_aee import CategorieAee
from rentri_dati_registri.models.destinazioni_rifiuto import DestinazioniRifiuto
from rentri_dati_registri.models.provenienza_rifiuto import ProvenienzaRifiuto
from rentri_dati_registri.models.stati_fisici import StatiFisici
from rentri_dati_registri.models.unita_misura_quantita_model import UnitaMisuraQuantitaModel
from rentri_dati_registri.models.veicolo_fuori_uso_reg_pubblica_sicurezza_model import VeicoloFuoriUsoRegPubblicaSicurezzaModel
from typing import Optional, Set
from typing_extensions import Self

class DatiRifiutoModel(BaseModel):
    """
    Identificazione del rifiuto
    """ # noqa: E501
    codice_eer: Annotated[str, Field(min_length=1, strict=True, max_length=6)] = Field(description="Codice EER.  Codice numerico di 6 caratteri che identifica il rifiuto in base alla Lista Europea dei Rifiuti (European Waste List - EWL),  vengono accettati solo codici EER validi e presenti nella lista ufficiale, senza alcun carattere separatore.  Vedi API di codifica: <i>GET /codifiche/v1.0/codici-eer</i>")
    descrizione_eer: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Descrizione del rifiuto, richiesta se il Codice EER specificato è di tipo .99")
    provenienza: Optional[ProvenienzaRifiuto] = Field(default=None, description="Provenienza  Vedi API di codifica: <i>GET /codifiche/v1.0/provenienza</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>U</i> - Urbano</li><li><i>S</i> - Speciale</li></ul></p>")
    caratteristiche_pericolo: Optional[List[CaratteristichePericolo]] = Field(default=None, description="Caratteristiche di pericolo (HP)  Vedi API di codifica: <i>GET /codifiche/v1.0/caratteristiche-pericolo</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>HP01</i> - Esplosivo</li><li><i>HP02</i> - Comburente</li><li><i>HP03</i> - Infiammabile</li><li><i>HP04</i> - Irritante - Irritazione cutanea e lesioni oculari</li><li><i>HP05</i> - Tossicità specifica per organi bersaglio (STOT)/Tossicità in caso di respirazione</li><li><i>HP06</i> - Tossicità acuta</li><li><i>HP07</i> - Cancerogeno</li><li><i>HP08</i> - Corrosivo</li><li><i>HP09</i> - Infettivo</li><li><i>HP10</i> - Tossico per la riproduzione</li><li><i>HP11</i> - Mutageno</li><li><i>HP12</i> - Liberazione di gas a tossicità acuta</li><li><i>HP13</i> - Sensibilizzante</li><li><i>HP14</i> - Ecotossico</li><li><i>HP15</i> - Rifiuto che non possiede direttamente una delle caratteristiche di pericolo già menzionate, ma può manifestarla successivamente</li></ul></p>")
    stato_fisico: StatiFisici = Field(description="Stato fisico  Vedi API di codifica: <i>GET /codifiche/v1.0/stati-fisici</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>SP</i> - In polvere o pulverulento</li><li><i>S</i> - Solido</li><li><i>FP</i> - Fangoso</li><li><i>L</i> - Liquido</li><li><i>VS</i> - Vischioso sciropposo</li></ul></p>")
    quantita: UnitaMisuraQuantitaModel = Field(description="Quantità")
    destinato_attivita: Optional[DestinazioniRifiuto] = Field(default=None, description="Destinato a  Vedi API di codifica: <i>GET /codifiche/v1.0/attivita-rs</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>R1</i> - Utilizzazione principale come combustibile o come altro mezzo per produrre energia</li><li><i>R2</i> - Rigenerazione/recupero di solventi</li><li><i>R3</i> - Riciclo/recupero delle sostanze organiche non utilizzate come solventi</li><li><i>R4</i> - Riciclo/recupero dei metalli e dei composti metallici</li><li><i>R5</i> - Riciclo/recupero di altre sostanze inorganiche</li><li><i>R6</i> - Rigenerazione degli acidi o delle basi</li><li><i>R7</i> - Recupero dei prodotti che servono a captare gli inquinanti</li><li><i>R8</i> - Recupero dei prodotti provenienti dai catalizzatori</li><li><i>R9</i> - Rigenerazione o altri reimpieghi degli oli</li><li><i>R10</i> - Spandimento sul suolo a beneficio dell'agricoltura o dell'ecologia</li><li><i>R11</i> - Utilizzazione di rifiuti ottenuti da una delle operazioni indicate da R1 a R10</li><li><i>R12</i> - Scambio di rifiuti per sottoporli a una delle operazioni indicate da R1 a R11</li><li><i>R13</i> - Messa in riserva di rifiuti per sottoporli a una delle operazioni indicate nei punti da R1 a R12</li><li><i>D1</i> - Deposito sul o nel suolo</li><li><i>D2</i> - Trattamento in ambiente terrestre</li><li><i>D3</i> - Iniezioni in profondità</li><li><i>D4</i> - Lagunaggio</li><li><i>D5</i> - Messa in discarica specialmente allestita</li><li><i>D6</i> - Scarico dei rifiuti solidi nell'ambiente idrico eccetto l'immersione</li><li><i>D7</i> - Immersione, compreso il seppellimento nel sottosuolo marino</li><li><i>D8</i> - Trattamento biologico non specificato altrove nel presente allegato</li><li><i>D9</i> - Trattamento fisico-chimico non specificato altrove nel presente allegato</li><li><i>D10</i> - Incenerimento a terra</li><li><i>D11</i> - Incenerimento in mare</li><li><i>D12</i> - Deposito permanente</li><li><i>D13</i> - Raggruppamento preliminare prima di una delle operazioni di cui ai punti da D1 a D12</li><li><i>D14</i> - Ricondizionamento preliminare prima di una delle operazioni di cui ai punti da D1 a D13</li><li><i>D15</i> - Deposito preliminare prima di una delle operazioni di cui ai punti da D1 a D14</li><li><i>CR</i> - Centro di raccolta</li></ul></p>")
    categorie_aee: Optional[List[CategorieAee]] = Field(default=None, description="Categoria AEE  Vedi API di codifica: <i>GET /codifiche/v1.0/categorie-raee</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>Cat1</i> - Apparecchiature per lo scambio di temperatura.</li><li><i>Cat2</i> - Schermi, monitor ed apparecchiature dotate di schermi con una superficie superiore a 100 cm2.</li><li><i>Cat3</i> - Lampade.</li><li><i>Cat4</i> - Apparecchiature di grandi dimensioni (con almeno una dimensione esterna superiore a 50 cm). Questa categoria non include le apparecchiature appartenenti alle categorie 1, 2 e 3.</li><li><i>Cat5</i> - Apparecchiature di piccole dimensioni (con nessuna dimensione esterna superiore a 50 cm). Questa categoria non include le apparecchiature appartenenti alle categorie 1, 2, 3 e 6.</li><li><i>Cat6</i> - Piccole apparecchiature informatiche e per telecomunicazioni (con nessuna dimensione esterna superiore a 50 cm).</li><li><i>PF</i> - Pannelli fotovoltaici</li></ul></p>")
    veicolo_fuori_uso: Optional[StrictBool] = Field(default=None, description="Veicoli fuori uso")
    veicolo_fuori_uso_reg_pubblica_sicurezza: Optional[VeicoloFuoriUsoRegPubblicaSicurezzaModel] = Field(default=None, description="Registro pubblica sicurezza.  Richiesto solamente se veicolo_fuori_uso è uguale a true.")
    __properties: ClassVar[List[str]] = ["codice_eer", "descrizione_eer", "provenienza", "caratteristiche_pericolo", "stato_fisico", "quantita", "destinato_attivita", "categorie_aee", "veicolo_fuori_uso", "veicolo_fuori_uso_reg_pubblica_sicurezza"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiRifiutoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quantita
        if self.quantita:
            _dict['quantita'] = self.quantita.to_dict()
        # override the default output from pydantic by calling `to_dict()` of veicolo_fuori_uso_reg_pubblica_sicurezza
        if self.veicolo_fuori_uso_reg_pubblica_sicurezza:
            _dict['veicolo_fuori_uso_reg_pubblica_sicurezza'] = self.veicolo_fuori_uso_reg_pubblica_sicurezza.to_dict()
        # set to None if descrizione_eer (nullable) is None
        # and model_fields_set contains the field
        if self.descrizione_eer is None and "descrizione_eer" in self.model_fields_set:
            _dict['descrizione_eer'] = None

        # set to None if provenienza (nullable) is None
        # and model_fields_set contains the field
        if self.provenienza is None and "provenienza" in self.model_fields_set:
            _dict['provenienza'] = None

        # set to None if caratteristiche_pericolo (nullable) is None
        # and model_fields_set contains the field
        if self.caratteristiche_pericolo is None and "caratteristiche_pericolo" in self.model_fields_set:
            _dict['caratteristiche_pericolo'] = None

        # set to None if destinato_attivita (nullable) is None
        # and model_fields_set contains the field
        if self.destinato_attivita is None and "destinato_attivita" in self.model_fields_set:
            _dict['destinato_attivita'] = None

        # set to None if categorie_aee (nullable) is None
        # and model_fields_set contains the field
        if self.categorie_aee is None and "categorie_aee" in self.model_fields_set:
            _dict['categorie_aee'] = None

        # set to None if veicolo_fuori_uso (nullable) is None
        # and model_fields_set contains the field
        if self.veicolo_fuori_uso is None and "veicolo_fuori_uso" in self.model_fields_set:
            _dict['veicolo_fuori_uso'] = None

        # set to None if veicolo_fuori_uso_reg_pubblica_sicurezza (nullable) is None
        # and model_fields_set contains the field
        if self.veicolo_fuori_uso_reg_pubblica_sicurezza is None and "veicolo_fuori_uso_reg_pubblica_sicurezza" in self.model_fields_set:
            _dict['veicolo_fuori_uso_reg_pubblica_sicurezza'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiRifiutoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codice_eer": obj.get("codice_eer"),
            "descrizione_eer": obj.get("descrizione_eer"),
            "provenienza": obj.get("provenienza"),
            "caratteristiche_pericolo": obj.get("caratteristiche_pericolo"),
            "stato_fisico": obj.get("stato_fisico"),
            "quantita": UnitaMisuraQuantitaModel.from_dict(obj["quantita"]) if obj.get("quantita") is not None else None,
            "destinato_attivita": obj.get("destinato_attivita"),
            "categorie_aee": obj.get("categorie_aee"),
            "veicolo_fuori_uso": obj.get("veicolo_fuori_uso"),
            "veicolo_fuori_uso_reg_pubblica_sicurezza": VeicoloFuoriUsoRegPubblicaSicurezzaModel.from_dict(obj["veicolo_fuori_uso_reg_pubblica_sicurezza"]) if obj.get("veicolo_fuori_uso_reg_pubblica_sicurezza") is not None else None
        })
        return _obj


