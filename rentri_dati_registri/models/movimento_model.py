# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_dati_registri.models.dati_destinatario_model import DatiDestinatarioModel
from rentri_dati_registri.models.dati_esito_model import DatiEsitoModel
from rentri_dati_registri.models.dati_integrazione_fir_model import DatiIntegrazioneFirModel
from rentri_dati_registri.models.dati_intermediario_model import DatiIntermediarioModel
from rentri_dati_registri.models.dati_materiali_model import DatiMaterialiModel
from rentri_dati_registri.models.dati_produttore_model import DatiProduttoreModel
from rentri_dati_registri.models.dati_riferimenti_base_model import DatiRiferimentiBaseModel
from rentri_dati_registri.models.dati_riferimenti_model import DatiRiferimentiModel
from rentri_dati_registri.models.dati_rifiuto_model import DatiRifiutoModel
from rentri_dati_registri.models.dati_trasportatore_model import DatiTrasportatoreModel
from typing import Optional, Set
from typing_extensions import Self

class MovimentoModel(BaseModel):
    """
    Dati della registrazione
    """ # noqa: E501
    riferimenti: DatiRiferimentiModel = Field(description="Riferimenti operazione")
    rifiuto: Optional[DatiRifiutoModel] = Field(default=None, description="Identificazione del rifiuto.  Richiesto solamente se causale_operazione è diversa da \"M\".")
    materiali: Optional[DatiMaterialiModel] = Field(default=None, description="Materiali (solo impianti).  Richiesto solamente se causale_operazione è uguale a \"M\".")
    integrazione_fir: Optional[DatiIntegrazioneFirModel] = Field(default=None, description="Integrazione FIR - Registro C/S.  Non deve essere indicato se causale_operazione è diversa da \"aT\", \"TR\", \"T*\", \"T*AT\".")
    esito: Optional[DatiEsitoModel] = Field(default=None, description="Esito conferimento.  Non deve essere indicato se causale_operazione è diversa da \"aT\", \"T*AT\".")
    produttore: Optional[DatiProduttoreModel] = Field(default=None, description="Produttore del rifiuto")
    trasportatore: Optional[DatiTrasportatoreModel] = Field(default=None, description="Trasportatore")
    destinatario: Optional[DatiDestinatarioModel] = Field(default=None, description="Destinatario")
    intermediario: Optional[DatiIntermediarioModel] = Field(default=None, description="Intermediario     ⚠️ Deprecato: utilizzare \"Intermediari\"")
    intermediari: Optional[List[DatiIntermediarioModel]] = Field(default=None, description="Intermediari")
    annotazioni: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Annotazioni generiche")
    __properties: ClassVar[List[str]] = ["riferimenti", "rifiuto", "materiali", "integrazione_fir", "esito", "produttore", "trasportatore", "destinatario", "intermediario", "intermediari", "annotazioni"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MovimentoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of riferimenti
        if self.riferimenti:
            _dict['riferimenti'] = self.riferimenti.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rifiuto
        if self.rifiuto:
            _dict['rifiuto'] = self.rifiuto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of materiali
        if self.materiali:
            _dict['materiali'] = self.materiali.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrazione_fir
        if self.integrazione_fir:
            _dict['integrazione_fir'] = self.integrazione_fir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of esito
        if self.esito:
            _dict['esito'] = self.esito.to_dict()
        # override the default output from pydantic by calling `to_dict()` of produttore
        if self.produttore:
            _dict['produttore'] = self.produttore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trasportatore
        if self.trasportatore:
            _dict['trasportatore'] = self.trasportatore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destinatario
        if self.destinatario:
            _dict['destinatario'] = self.destinatario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intermediario
        if self.intermediario:
            _dict['intermediario'] = self.intermediario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in intermediari (list)
        _items = []
        if self.intermediari:
            for _item_intermediari in self.intermediari:
                if _item_intermediari:
                    _items.append(_item_intermediari.to_dict())
            _dict['intermediari'] = _items
        # set to None if rifiuto (nullable) is None
        # and model_fields_set contains the field
        if self.rifiuto is None and "rifiuto" in self.model_fields_set:
            _dict['rifiuto'] = None

        # set to None if materiali (nullable) is None
        # and model_fields_set contains the field
        if self.materiali is None and "materiali" in self.model_fields_set:
            _dict['materiali'] = None

        # set to None if integrazione_fir (nullable) is None
        # and model_fields_set contains the field
        if self.integrazione_fir is None and "integrazione_fir" in self.model_fields_set:
            _dict['integrazione_fir'] = None

        # set to None if esito (nullable) is None
        # and model_fields_set contains the field
        if self.esito is None and "esito" in self.model_fields_set:
            _dict['esito'] = None

        # set to None if produttore (nullable) is None
        # and model_fields_set contains the field
        if self.produttore is None and "produttore" in self.model_fields_set:
            _dict['produttore'] = None

        # set to None if trasportatore (nullable) is None
        # and model_fields_set contains the field
        if self.trasportatore is None and "trasportatore" in self.model_fields_set:
            _dict['trasportatore'] = None

        # set to None if destinatario (nullable) is None
        # and model_fields_set contains the field
        if self.destinatario is None and "destinatario" in self.model_fields_set:
            _dict['destinatario'] = None

        # set to None if intermediario (nullable) is None
        # and model_fields_set contains the field
        if self.intermediario is None and "intermediario" in self.model_fields_set:
            _dict['intermediario'] = None

        # set to None if intermediari (nullable) is None
        # and model_fields_set contains the field
        if self.intermediari is None and "intermediari" in self.model_fields_set:
            _dict['intermediari'] = None

        # set to None if annotazioni (nullable) is None
        # and model_fields_set contains the field
        if self.annotazioni is None and "annotazioni" in self.model_fields_set:
            _dict['annotazioni'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MovimentoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "riferimenti": DatiRiferimentiModel.from_dict(obj["riferimenti"]) if obj.get("riferimenti") is not None else None,
            "rifiuto": DatiRifiutoModel.from_dict(obj["rifiuto"]) if obj.get("rifiuto") is not None else None,
            "materiali": DatiMaterialiModel.from_dict(obj["materiali"]) if obj.get("materiali") is not None else None,
            "integrazione_fir": DatiIntegrazioneFirModel.from_dict(obj["integrazione_fir"]) if obj.get("integrazione_fir") is not None else None,
            "esito": DatiEsitoModel.from_dict(obj["esito"]) if obj.get("esito") is not None else None,
            "produttore": DatiProduttoreModel.from_dict(obj["produttore"]) if obj.get("produttore") is not None else None,
            "trasportatore": DatiTrasportatoreModel.from_dict(obj["trasportatore"]) if obj.get("trasportatore") is not None else None,
            "destinatario": DatiDestinatarioModel.from_dict(obj["destinatario"]) if obj.get("destinatario") is not None else None,
            "intermediario": DatiIntermediarioModel.from_dict(obj["intermediario"]) if obj.get("intermediario") is not None else None,
            "intermediari": [DatiIntermediarioModel.from_dict(_item) for _item in obj["intermediari"]] if obj.get("intermediari") is not None else None,
            "annotazioni": obj.get("annotazioni")
        })
        return _obj


