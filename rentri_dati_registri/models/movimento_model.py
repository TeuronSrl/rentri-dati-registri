# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr
from rentri_dati_registri.models.dati_destinatario_model import DatiDestinatarioModel
from rentri_dati_registri.models.dati_esito_model import DatiEsitoModel
from rentri_dati_registri.models.dati_integrazione_fir_model import DatiIntegrazioneFirModel
from rentri_dati_registri.models.dati_intermediario_model import DatiIntermediarioModel
from rentri_dati_registri.models.dati_materiali_model import DatiMaterialiModel
from rentri_dati_registri.models.dati_produttore_model import DatiProduttoreModel
from rentri_dati_registri.models.dati_riferimenti_base_model import DatiRiferimentiBaseModel
from rentri_dati_registri.models.dati_riferimenti_model import DatiRiferimentiModel
from rentri_dati_registri.models.dati_rifiuto_model import DatiRifiutoModel
from rentri_dati_registri.models.dati_trasportatore_model import DatiTrasportatoreModel

class MovimentoModel(BaseModel):
    """
    Dati della registrazione  # noqa: E501
    """
    riferimenti: DatiRiferimentiModel = Field(default=..., description="Riferimenti operazione")
    rifiuto: Optional[DatiRifiutoModel] = Field(default=None, description="Identificazione del rifiuto.  Richiesto solamente se causale_operazione è diversa da \"M\".")
    materiali: Optional[DatiMaterialiModel] = Field(default=None, description="Materiali (solo impianti).  Richiesto solamente se causale_operazione è uguale a \"M\".")
    integrazione_fir: Optional[DatiIntegrazioneFirModel] = Field(default=None, description="Integrazione FIR - Registro C/S.  Non deve essere indicato se causale_operazione è diversa da \"aT\", \"TR\", \"T*\", \"T*AT\".")
    esito: Optional[DatiEsitoModel] = Field(default=None, description="Esito conferimento.  Non deve essere indicato se causale_operazione è diversa da \"aT\", \"T*AT\".")
    produttore: Optional[DatiProduttoreModel] = Field(default=None, description="Produttore del rifiuto")
    trasportatore: Optional[DatiTrasportatoreModel] = Field(default=None, description="Trasportatore")
    destinatario: Optional[DatiDestinatarioModel] = Field(default=None, description="Destinatario")
    intermediario: Optional[DatiIntermediarioModel] = Field(default=None, description="Intermediario     ⚠️ Deprecato: utilizzare \"Intermediari\"")
    intermediari: Optional[conlist(DatiIntermediarioModel)] = Field(default=None, description="Intermediari")
    annotazioni: Optional[constr(strict=True, max_length=500)] = Field(default=None, description="Annotazioni generiche")
    __properties = ["riferimenti", "rifiuto", "materiali", "integrazione_fir", "esito", "produttore", "trasportatore", "destinatario", "intermediario", "intermediari", "annotazioni"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MovimentoModel:
        """Create an instance of MovimentoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of riferimenti
        if self.riferimenti:
            _dict['riferimenti'] = self.riferimenti.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rifiuto
        if self.rifiuto:
            _dict['rifiuto'] = self.rifiuto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of materiali
        if self.materiali:
            _dict['materiali'] = self.materiali.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrazione_fir
        if self.integrazione_fir:
            _dict['integrazione_fir'] = self.integrazione_fir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of esito
        if self.esito:
            _dict['esito'] = self.esito.to_dict()
        # override the default output from pydantic by calling `to_dict()` of produttore
        if self.produttore:
            _dict['produttore'] = self.produttore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trasportatore
        if self.trasportatore:
            _dict['trasportatore'] = self.trasportatore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destinatario
        if self.destinatario:
            _dict['destinatario'] = self.destinatario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intermediario
        if self.intermediario:
            _dict['intermediario'] = self.intermediario.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in intermediari (list)
        _items = []
        if self.intermediari:
            for _item in self.intermediari:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intermediari'] = _items
        # set to None if rifiuto (nullable) is None
        # and __fields_set__ contains the field
        if self.rifiuto is None and "rifiuto" in self.__fields_set__:
            _dict['rifiuto'] = None

        # set to None if materiali (nullable) is None
        # and __fields_set__ contains the field
        if self.materiali is None and "materiali" in self.__fields_set__:
            _dict['materiali'] = None

        # set to None if integrazione_fir (nullable) is None
        # and __fields_set__ contains the field
        if self.integrazione_fir is None and "integrazione_fir" in self.__fields_set__:
            _dict['integrazione_fir'] = None

        # set to None if esito (nullable) is None
        # and __fields_set__ contains the field
        if self.esito is None and "esito" in self.__fields_set__:
            _dict['esito'] = None

        # set to None if produttore (nullable) is None
        # and __fields_set__ contains the field
        if self.produttore is None and "produttore" in self.__fields_set__:
            _dict['produttore'] = None

        # set to None if trasportatore (nullable) is None
        # and __fields_set__ contains the field
        if self.trasportatore is None and "trasportatore" in self.__fields_set__:
            _dict['trasportatore'] = None

        # set to None if destinatario (nullable) is None
        # and __fields_set__ contains the field
        if self.destinatario is None and "destinatario" in self.__fields_set__:
            _dict['destinatario'] = None

        # set to None if intermediario (nullable) is None
        # and __fields_set__ contains the field
        if self.intermediario is None and "intermediario" in self.__fields_set__:
            _dict['intermediario'] = None

        # set to None if intermediari (nullable) is None
        # and __fields_set__ contains the field
        if self.intermediari is None and "intermediari" in self.__fields_set__:
            _dict['intermediari'] = None

        # set to None if annotazioni (nullable) is None
        # and __fields_set__ contains the field
        if self.annotazioni is None and "annotazioni" in self.__fields_set__:
            _dict['annotazioni'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MovimentoModel:
        """Create an instance of MovimentoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MovimentoModel.parse_obj(obj)

        _obj = MovimentoModel.parse_obj({
            "riferimenti": DatiRiferimentiModel.from_dict(obj.get("riferimenti")) if obj.get("riferimenti") is not None else None,
            "rifiuto": DatiRifiutoModel.from_dict(obj.get("rifiuto")) if obj.get("rifiuto") is not None else None,
            "materiali": DatiMaterialiModel.from_dict(obj.get("materiali")) if obj.get("materiali") is not None else None,
            "integrazione_fir": DatiIntegrazioneFirModel.from_dict(obj.get("integrazione_fir")) if obj.get("integrazione_fir") is not None else None,
            "esito": DatiEsitoModel.from_dict(obj.get("esito")) if obj.get("esito") is not None else None,
            "produttore": DatiProduttoreModel.from_dict(obj.get("produttore")) if obj.get("produttore") is not None else None,
            "trasportatore": DatiTrasportatoreModel.from_dict(obj.get("trasportatore")) if obj.get("trasportatore") is not None else None,
            "destinatario": DatiDestinatarioModel.from_dict(obj.get("destinatario")) if obj.get("destinatario") is not None else None,
            "intermediario": DatiIntermediarioModel.from_dict(obj.get("intermediario")) if obj.get("intermediario") is not None else None,
            "intermediari": [DatiIntermediarioModel.from_dict(_item) for _item in obj.get("intermediari")] if obj.get("intermediari") is not None else None,
            "annotazioni": obj.get("annotazioni")
        })
        return _obj


