# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from rentri_dati_registri.models.dati_respingimento_model import DatiRespingimentoModel

class DatiEsitoModel(BaseModel):
    """
    Esito conferimento  # noqa: E501
    """
    data_fine_trasporto: Optional[datetime] = Field(default=None, description="Data di fine trasporto (formato ISO 8601 UTC)")
    peso_verificato_destino: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Peso verificato a destino (parte intera: 10, parte decimale: 4) compreso tra 0.0000 e 9999999999.9999.")
    respingimento: Optional[DatiRespingimentoModel] = Field(default=None, description="Dati sul respingimento")
    __properties = ["data_fine_trasporto", "peso_verificato_destino", "respingimento"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatiEsitoModel:
        """Create an instance of DatiEsitoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of respingimento
        if self.respingimento:
            _dict['respingimento'] = self.respingimento.to_dict()
        # set to None if data_fine_trasporto (nullable) is None
        # and __fields_set__ contains the field
        if self.data_fine_trasporto is None and "data_fine_trasporto" in self.__fields_set__:
            _dict['data_fine_trasporto'] = None

        # set to None if peso_verificato_destino (nullable) is None
        # and __fields_set__ contains the field
        if self.peso_verificato_destino is None and "peso_verificato_destino" in self.__fields_set__:
            _dict['peso_verificato_destino'] = None

        # set to None if respingimento (nullable) is None
        # and __fields_set__ contains the field
        if self.respingimento is None and "respingimento" in self.__fields_set__:
            _dict['respingimento'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatiEsitoModel:
        """Create an instance of DatiEsitoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatiEsitoModel.parse_obj(obj)

        _obj = DatiEsitoModel.parse_obj({
            "data_fine_trasporto": obj.get("data_fine_trasporto"),
            "peso_verificato_destino": obj.get("peso_verificato_destino"),
            "respingimento": DatiRespingimentoModel.from_dict(obj.get("respingimento")) if obj.get("respingimento") is not None else None
        })
        return _obj


