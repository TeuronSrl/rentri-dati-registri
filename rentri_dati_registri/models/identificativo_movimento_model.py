# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr, validator

class IdentificativoMovimentoModel(BaseModel):
    """
    Dati di identificazione della registrazione tramite identificativo rilasciato dal RENTRI (da utilizzare in alternativa a anno di riferimento e progressivo)  # noqa: E501
    """
    identificativo: constr(strict=True, max_length=20, min_length=1) = Field(default=..., description="Identificativo RENTRI")
    __properties = []

    @validator('identificativo')
    def identificativo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^M[0-9A-Z]{19}$", value):
            raise ValueError(r"must validate the regular expression /^M[0-9A-Z]{19}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentificativoMovimentoModel:
        """Create an instance of IdentificativoMovimentoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentificativoMovimentoModel:
        """Create an instance of IdentificativoMovimentoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentificativoMovimentoModel.parse_obj(obj)

        _obj = IdentificativoMovimentoModel.parse_obj(obj)
        return _obj


