# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from rentri_dati_registri.models.sorgente_transazione import SorgenteTransazione
from rentri_dati_registri.models.stato_transazione import StatoTransazione
from rentri_dati_registri.models.tipo_transazione import TipoTransazione
from typing import Optional, Set
from typing_extensions import Self

class InfoTransazioneModel(BaseModel):
    """
    InfoTransazioneModel
    """ # noqa: E501
    identificativo: Optional[StrictStr] = None
    tipo: Optional[TipoTransazione] = None
    identificativo_precedente: Optional[StrictStr] = None
    data_trasmissione: Optional[datetime] = None
    identificativo_entita: Optional[StrictStr] = None
    data_inizio_elaborazione: Optional[datetime] = None
    data_fine_elaborazione: Optional[datetime] = None
    status_code_push: Optional[StrictInt] = None
    data_push: Optional[datetime] = None
    data_ultimo_pull: Optional[datetime] = None
    stato: Optional[StatoTransazione] = None
    sorgente: Optional[SorgenteTransazione] = None
    endpoint: Optional[StrictStr] = None
    identificativo_firmatario: Optional[StrictStr] = None
    num_iscr_operatore: Optional[StrictStr] = None
    identificativo_operatore: Optional[StrictStr] = None
    denominazione_operatore: Optional[StrictStr] = None
    num_iscr_sito: Optional[StrictStr] = None
    sito_comune_id: Optional[StrictStr] = None
    sito_provincia_id: Optional[StrictStr] = None
    sito_indirizzo: Optional[StrictStr] = None
    sito_civico: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["identificativo", "tipo", "identificativo_precedente", "data_trasmissione", "identificativo_entita", "data_inizio_elaborazione", "data_fine_elaborazione", "status_code_push", "data_push", "data_ultimo_pull", "stato", "sorgente", "endpoint", "identificativo_firmatario", "num_iscr_operatore", "identificativo_operatore", "denominazione_operatore", "num_iscr_sito", "sito_comune_id", "sito_provincia_id", "sito_indirizzo", "sito_civico"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InfoTransazioneModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if identificativo_precedente (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo_precedente is None and "identificativo_precedente" in self.model_fields_set:
            _dict['identificativo_precedente'] = None

        # set to None if data_trasmissione (nullable) is None
        # and model_fields_set contains the field
        if self.data_trasmissione is None and "data_trasmissione" in self.model_fields_set:
            _dict['data_trasmissione'] = None

        # set to None if identificativo_entita (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo_entita is None and "identificativo_entita" in self.model_fields_set:
            _dict['identificativo_entita'] = None

        # set to None if data_inizio_elaborazione (nullable) is None
        # and model_fields_set contains the field
        if self.data_inizio_elaborazione is None and "data_inizio_elaborazione" in self.model_fields_set:
            _dict['data_inizio_elaborazione'] = None

        # set to None if data_fine_elaborazione (nullable) is None
        # and model_fields_set contains the field
        if self.data_fine_elaborazione is None and "data_fine_elaborazione" in self.model_fields_set:
            _dict['data_fine_elaborazione'] = None

        # set to None if status_code_push (nullable) is None
        # and model_fields_set contains the field
        if self.status_code_push is None and "status_code_push" in self.model_fields_set:
            _dict['status_code_push'] = None

        # set to None if data_push (nullable) is None
        # and model_fields_set contains the field
        if self.data_push is None and "data_push" in self.model_fields_set:
            _dict['data_push'] = None

        # set to None if data_ultimo_pull (nullable) is None
        # and model_fields_set contains the field
        if self.data_ultimo_pull is None and "data_ultimo_pull" in self.model_fields_set:
            _dict['data_ultimo_pull'] = None

        # set to None if endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint is None and "endpoint" in self.model_fields_set:
            _dict['endpoint'] = None

        # set to None if identificativo_firmatario (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo_firmatario is None and "identificativo_firmatario" in self.model_fields_set:
            _dict['identificativo_firmatario'] = None

        # set to None if num_iscr_operatore (nullable) is None
        # and model_fields_set contains the field
        if self.num_iscr_operatore is None and "num_iscr_operatore" in self.model_fields_set:
            _dict['num_iscr_operatore'] = None

        # set to None if identificativo_operatore (nullable) is None
        # and model_fields_set contains the field
        if self.identificativo_operatore is None and "identificativo_operatore" in self.model_fields_set:
            _dict['identificativo_operatore'] = None

        # set to None if denominazione_operatore (nullable) is None
        # and model_fields_set contains the field
        if self.denominazione_operatore is None and "denominazione_operatore" in self.model_fields_set:
            _dict['denominazione_operatore'] = None

        # set to None if num_iscr_sito (nullable) is None
        # and model_fields_set contains the field
        if self.num_iscr_sito is None and "num_iscr_sito" in self.model_fields_set:
            _dict['num_iscr_sito'] = None

        # set to None if sito_comune_id (nullable) is None
        # and model_fields_set contains the field
        if self.sito_comune_id is None and "sito_comune_id" in self.model_fields_set:
            _dict['sito_comune_id'] = None

        # set to None if sito_provincia_id (nullable) is None
        # and model_fields_set contains the field
        if self.sito_provincia_id is None and "sito_provincia_id" in self.model_fields_set:
            _dict['sito_provincia_id'] = None

        # set to None if sito_indirizzo (nullable) is None
        # and model_fields_set contains the field
        if self.sito_indirizzo is None and "sito_indirizzo" in self.model_fields_set:
            _dict['sito_indirizzo'] = None

        # set to None if sito_civico (nullable) is None
        # and model_fields_set contains the field
        if self.sito_civico is None and "sito_civico" in self.model_fields_set:
            _dict['sito_civico'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InfoTransazioneModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identificativo": obj.get("identificativo"),
            "tipo": obj.get("tipo"),
            "identificativo_precedente": obj.get("identificativo_precedente"),
            "data_trasmissione": obj.get("data_trasmissione"),
            "identificativo_entita": obj.get("identificativo_entita"),
            "data_inizio_elaborazione": obj.get("data_inizio_elaborazione"),
            "data_fine_elaborazione": obj.get("data_fine_elaborazione"),
            "status_code_push": obj.get("status_code_push"),
            "data_push": obj.get("data_push"),
            "data_ultimo_pull": obj.get("data_ultimo_pull"),
            "stato": obj.get("stato"),
            "sorgente": obj.get("sorgente"),
            "endpoint": obj.get("endpoint"),
            "identificativo_firmatario": obj.get("identificativo_firmatario"),
            "num_iscr_operatore": obj.get("num_iscr_operatore"),
            "identificativo_operatore": obj.get("identificativo_operatore"),
            "denominazione_operatore": obj.get("denominazione_operatore"),
            "num_iscr_sito": obj.get("num_iscr_sito"),
            "sito_comune_id": obj.get("sito_comune_id"),
            "sito_provincia_id": obj.get("sito_provincia_id"),
            "sito_indirizzo": obj.get("sito_indirizzo"),
            "sito_civico": obj.get("sito_civico")
        })
        return _obj


