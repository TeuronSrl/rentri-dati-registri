# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class IdentificativoMovimentoCompletoModel(BaseModel):
    """
    Dati di identificazione della registrazione con anno/progressivo e identificativo rilasciato dal RENTRI (modello utilizzato in output)  # noqa: E501
    """
    anno: Optional[StrictInt] = Field(default=None, description="Anno di riferimento della registrazione")
    progressivo: Optional[StrictInt] = Field(default=None, description="Progressivo della registrazione")
    identificativo: Optional[StrictStr] = Field(default=None, description="Identificativo RENTRI")
    __properties = ["anno", "progressivo", "identificativo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentificativoMovimentoCompletoModel:
        """Create an instance of IdentificativoMovimentoCompletoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if anno (nullable) is None
        # and __fields_set__ contains the field
        if self.anno is None and "anno" in self.__fields_set__:
            _dict['anno'] = None

        # set to None if progressivo (nullable) is None
        # and __fields_set__ contains the field
        if self.progressivo is None and "progressivo" in self.__fields_set__:
            _dict['progressivo'] = None

        # set to None if identificativo (nullable) is None
        # and __fields_set__ contains the field
        if self.identificativo is None and "identificativo" in self.__fields_set__:
            _dict['identificativo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentificativoMovimentoCompletoModel:
        """Create an instance of IdentificativoMovimentoCompletoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentificativoMovimentoCompletoModel.parse_obj(obj)

        _obj = IdentificativoMovimentoCompletoModel.parse_obj({
            "anno": obj.get("anno"),
            "progressivo": obj.get("progressivo"),
            "identificativo": obj.get("identificativo")
        })
        return _obj


