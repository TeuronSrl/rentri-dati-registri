# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from rentri_dati_registri.models.causali_respingimento import CausaliRespingimento
from rentri_dati_registri.models.tipi_respingimento import TipiRespingimento
from rentri_dati_registri.models.unita_misura_quantita_model import UnitaMisuraQuantitaModel
from typing import Optional, Set
from typing_extensions import Self

class DatiRespingimentoModel(BaseModel):
    """
    Respingimento
    """ # noqa: E501
    tipo: TipiRespingimento = Field(description="Tipologia di respingimento  Vedi API di codifica: <i>GET /codifiche/v1.0/tipi-respingimento</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>T</i> - Totale</li><li><i>P</i> - Parziale</li></ul></p>")
    quantita: Optional[UnitaMisuraQuantitaModel] = Field(default=None, description="Quantità respinta")
    causale: Optional[CausaliRespingimento] = Field(default=None, description="Causale del respingimento  Vedi API di codifica: <i>GET /codifiche/v1.0/causali-respingimento</i><p>Valori ammessi:<ul style=\"margin:0\"><li><i>NC</i> - Non Conformità, a titolo esemplificativo e non esaustivo, si riporta: rifiuti diverso da quello descritto dal formulario o da quanto dichiarato ai fini della pratica di conferimento all'impianto, rifiuto confezionato in modo non conforme da quanto previsto per la specifica destinazione o dalle norme applicabili, di stato fisico diverso da quello previsto)</li><li><i>IR</i> - Irricevibile, (a titolo esemplificativo e non esaustivo, si riporta: rifiuto non previsto dall'autorizzazione / iscrizione dell'impianto di destino, mancanza dei requisiti per l'ammissibilità all'impianto quali caratterizzazione di base, analisi di classificazione o di ammissibilità…)</li><li><i>A</i> - Indicare motivazione. A titolo esemplificativo e non esaustivo, si riporta: esaurimento volumetria disponibile per conferimento rifiuto, chiusura impianto per manutenzione straordinaria, ecc.</li></ul></p>")
    causale_altro: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Altra tipologia di causale non prevista.  Richiesto solamente se causale è uguale a \"A\".")
    __properties: ClassVar[List[str]] = ["tipo", "quantita", "causale", "causale_altro"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatiRespingimentoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quantita
        if self.quantita:
            _dict['quantita'] = self.quantita.to_dict()
        # set to None if quantita (nullable) is None
        # and model_fields_set contains the field
        if self.quantita is None and "quantita" in self.model_fields_set:
            _dict['quantita'] = None

        # set to None if causale (nullable) is None
        # and model_fields_set contains the field
        if self.causale is None and "causale" in self.model_fields_set:
            _dict['causale'] = None

        # set to None if causale_altro (nullable) is None
        # and model_fields_set contains the field
        if self.causale_altro is None and "causale_altro" in self.model_fields_set:
            _dict['causale_altro'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatiRespingimentoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tipo": obj.get("tipo"),
            "quantita": UnitaMisuraQuantitaModel.from_dict(obj["quantita"]) if obj.get("quantita") is not None else None,
            "causale": obj.get("causale"),
            "causale_altro": obj.get("causale_altro")
        })
        return _obj


