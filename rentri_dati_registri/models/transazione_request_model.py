# coding: utf-8

"""
    dati-registri

    Servizio dati registri RENTRI

    The version of the OpenAPI document: 1.0.20250114-613
    Contact: techref@rentri.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictStr
from rentri_dati_registri.models.transazione_request_data_model import TransazioneRequestDataModel

class TransazioneRequestModel(BaseModel):
    """
    TransazioneRequestModel
    """
    identificativo_transazione: Optional[StrictStr] = None
    jti: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = None
    date_time: Optional[datetime] = None
    endpoint: Optional[StrictStr] = None
    data: Optional[TransazioneRequestDataModel] = None
    __properties = ["identificativo_transazione", "jti", "issuer", "date_time", "endpoint", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransazioneRequestModel:
        """Create an instance of TransazioneRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # set to None if jti (nullable) is None
        # and __fields_set__ contains the field
        if self.jti is None and "jti" in self.__fields_set__:
            _dict['jti'] = None

        # set to None if issuer (nullable) is None
        # and __fields_set__ contains the field
        if self.issuer is None and "issuer" in self.__fields_set__:
            _dict['issuer'] = None

        # set to None if endpoint (nullable) is None
        # and __fields_set__ contains the field
        if self.endpoint is None and "endpoint" in self.__fields_set__:
            _dict['endpoint'] = None

        # set to None if data (nullable) is None
        # and __fields_set__ contains the field
        if self.data is None and "data" in self.__fields_set__:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransazioneRequestModel:
        """Create an instance of TransazioneRequestModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransazioneRequestModel.parse_obj(obj)

        _obj = TransazioneRequestModel.parse_obj({
            "identificativo_transazione": obj.get("identificativo_transazione"),
            "jti": obj.get("jti"),
            "issuer": obj.get("issuer"),
            "date_time": obj.get("date_time"),
            "endpoint": obj.get("endpoint"),
            "data": TransazioneRequestDataModel.from_dict(obj.get("data")) if obj.get("data") is not None else None
        })
        return _obj


